#!/ebi/production/seqdb/embl/tools/bin/perl
#
# report_digest.pl
# Writes a digest of the loading report generated by antiload/putff.
# Also archives LSF and clonepub reports
# Archives are removed when they are more than 7 days old
#
# xx-Feb-2005 F. Nardone       Created
# 31-Mar-2005     "            Do not tar reports, removing a putff
#                              report while loading causes the loaded
#                              entries count to fail.
# 10-May-2005     "            Fixed bug which made it not delete tar
#                               archives.

use strict;
use warnings;
use diagnostics;

use FtpUpdates::Config;
use Utils qw(my_opendir my_open my_system my_rename my_unlink);
use Lockfile;

my $exit_status = 0;

my $lockfile = '/ebi/production/seqdb/embl/tools/curators/scripts/ftp_updates/report_digest.LOCK';

my $LOCK;

if (-e $lockfile) {
		
    my $processes = check_for_processes_running( $lockfile );
    
    if (!$processes) {
	#renew lock
	system("rm $lockfile");
	$LOCK = Lockfile->new( $lockfile );
    }
    else {
	# don't allow script to run because lock and active processes are present
	die( "Lockfile '$lockfile' exists. Report digest aborted\n\n" );
    }
}
else {
    $LOCK = Lockfile->new( $lockfile );
}

main();

$LOCK->remove();


sub main {

    my @type_codes = ( 'TYPE_NORMAL',
		       'TYPE_TPA',
		       'TYPE_CON',
		       'TYPE_WGS');

    foreach my $collaborator ( NCBI, DDBJ ) {

	foreach my $entry_type (@type_codes) {

	    my FtpUpdates::Config $config = FtpUpdates::Config->get_config( $collaborator, $entry_type, 1 );

	    write_report_digest( $config );
	    remove_old_tar_archives( $config );
	}
    }
}

sub check_for_processes_running {
    # find out if there are actually processes running
    # since a lock file has been found

    my $lockfile = shift;

    my ($process_id, @processes, $grepCmd);

    open(READLOCK, "<$lockfile") || print "Could not open lock file $lockfile to check for process id\n";
    while (<READLOCK>) {
	if ($_ =~ /Process id of script run : (\d+)/) {
	    $process_id = $1;
	    last;
	}
    }
    close(READLOCK);
    
    $grepCmd = "ps -fu datalib | grep $process_id | grep loader.pl | grep -v 'ps -fu'";
    @processes = `$grepCmd`;
    
    return(scalar(@processes));
}

sub write_report_digest {
  my FtpUpdates::Config $config = $_[0];

  if ( !-d( $config->{digest_dir} ) ) {
    mkdir( $config->{digest_dir} );
  }

  my $files = get_report_files( $config );
  foreach my $fname ( @$files ) {
    append_to_digest( $config, $fname );
  }
}

sub get_report_files {
  my FtpUpdates::Config $config = $_[0];

  my $dh = my_opendir( $config->{report_dir} );
  my @files = grep( /^[^\.].*\.report/, readdir( $dh ));
  closedir( $dh );

  return \@files;
}

sub append_to_digest {
  my FtpUpdates::Config $config = shift;
  my $fname = shift;

  my $fh = my_open( "$config->{report_dir}/$fname" );

  my $line = readline( $fh );
  my ($year, $month, $day) = $line =~ m/^[^;]+;(\w+)-(\w+)-(\w+);/;# the loading date
  my $prefix = sprintf( "%d%02d", $year, $month );

  my $digest_fh = my_open( ">>$config->{digest_dir}/${prefix}_loading.report" );

  #print( $digest_fh $line );
  while ( $line ) {
    print( $digest_fh $line );
    $line = readline( $fh );
  }

  close( $digest_fh ) or die( "ERROR: cannot close '$$$digest_fh'.\n$!" );
  close( $fh ) or die( "ERROR: cannot close '$$$fh'.\n$!" );
  my_unlink( "$config->{report_dir}/$fname" );
}

sub remove_old_tar_archives {
  my FtpUpdates::Config $config = shift;

  remove_old_archive( $config, 'loader' );
  remove_old_archive( $config, 'putff' );
  remove_old_archive( $config, 'LSF' );
}

sub remove_old_archive {
  my FtpUpdates::Config $config = shift;
  my $name = shift;

  my $dh =  my_opendir( $config->{logs_dir} );
  my @files = grep( {m/^[^\.].*_$name\.report\.tar/ and -M( "$config->{logs_dir}/$_" ) > 7} readdir( $dh ));
  closedir( $dh );
  @files = map( "$config->{logs_dir}/$_", @files );

  if ( @files ) {
    unlink( @files );
  }
}

exit($exit_status);
