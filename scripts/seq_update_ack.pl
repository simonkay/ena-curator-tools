#!/ebi/production/seqdb/embl/tools/bin/perl -w
#
#  $Header: /ebi/cvs/seqdb/seqdb/tools/curators/scripts/seq_update_ack.pl,v 1.23 2011/11/29 16:33:38 xin Exp $
#
#  (C) EBI 2000
#
#  MODULE DESCRIPTION:
#
#  Prepares an acknowledgment email for update requests based on the
#  information found in file upd.csh (generated by seq_update.pl).
#  NOTE: DT-lines are stripped from flat files because they are
#  misleading if the entry has not yet been distributed.
#
#  MODIFICATION HISTORY:
#
#  30-AUG-2000 Nicole Redaschi     Ported from VMS SUACK.COM.
#  13-JUN-2001 Carola Kanz         delete DT lines from file sent to submittor,
#                                  because they are misleading when the entry
#                                  was unloaded before distribution.
#  27-JUN-2001 Carola Kanz         format file upd.csh changed -> parsing of 
#                                  accnos had to be changed
#  28-JUN-2001 Carola Kanz         delete XX line after deleted DT lines
#  09-AUG-2001 Peter Stoehr        usage notes
#  15-AUG-2001 Peter Stoehr        remove .signature from email
#  11-SEP-2001 Nicole Redaschi     cosmetic change to output format
#  19-SEP-2001 Nicole Redaschi     removed message header (incl. call to submission_details)
#                                  call getff.pl instead of getff
#  22-SEP-2001 Nicole Redaschi     added option -test.
#  25-SEP-2001 Nicole Redaschi     use option -test in call to getff.pl.
#  07-JAN-2007 Quan Lin            updated to the new entry status column
#  20-FEB-2007 Nadeem Faruque      altered format of status info in output
#===============================================================================

use strict;
use DBI;
use DBD::Oracle;
use dbi_utils;
use SeqDBUtils;

my $template = "/ebi/production/seqdb/embl/tools/forms/letters/templates/update_acknowledgment.email";
my $upd      = "upd.csh";
my $tmp      = "mail.tmp";
my $ack      = "seq_update.ack";
my $getff    = "getff.pl";

#-------------------------------------------------------------------------------
# handle command line.
#-------------------------------------------------------------------------------

my $usage = "\n PURPOSE: Prepares an update acknowledgment email (file seq_update.ack)\n".
            "          for all entries listed in the file upd.csh, which has been\n".
	    "          previously generated by seq_update.pl\n\n".
            " USAGE:   $0\n".
	    "          <user/password\@instance> [-test] [-h]\n\n".
            "   <user/password\@instance>\n".
	    "                   where <user/password> is taken automatically from\n".
	    "                   current unix session\n".
	    "                   where <\@instance> is either \@enapro or \@devt\n\n".
	    "   -test           checks for test vs. production settings\n\n".
            "   -h              shows this help text\n\n";

( @ARGV >= 1 && @ARGV <= 2 ) || die $usage;
( $ARGV[0] !~ /^-h/i ) || die $usage;

hide ( 1 );

my $login = $ARGV[0];
my $test  = 0;

for ( my $i = 1; $i < @ARGV; ++$i )
{
   if ( $ARGV[$i] eq "-test" )
   {
      $test = 1;
   }
   else
   {
      die ( $usage );
   }
}

die if ( check_environment ( $test, $login ) == 0 );

#-------------------------------------------------------------------------------
# get the DS number from the current working directory
#-------------------------------------------------------------------------------

my $ds = get_ds ( $test ) || die;

#-------------------------------------------------------------------------------
# get accession numbers
#-------------------------------------------------------------------------------

my @accnos = ();
open ( UPD, "< $upd" ) || die "ERROR: cannot open file $upd: $!";
while ( <UPD> )
{
   next if /^\s+$/; # skip empty lines.
   my ( $acc ) = ( $_ =~ /(\w{1,2}\d{5,6}).fflupd / );
   next if ( !defined $acc );
   print uc ( $acc )."\n";
   push @accnos, uc ( $acc );
}
close ( UPD ) || die "ERROR: cannot close file $upd: $!";

#-------------------------------------------------------------------------------
# connect to database
#-------------------------------------------------------------------------------

my $dbh = dbi_ora_connect ( $login );
dbi_do ( $dbh, "alter session set nls_date_format='DD-MON-YYYY'" );

#-------------------------------------------------------------------------------
# open files: 
# 1. acknowledgement letter
# 2. temporary file for flat file information (we append them at the end of the
#    acknowledgement letter)
# 3. template letter
#-------------------------------------------------------------------------------

open ( ACK, "> $ack" ) || bail ( "cannot open file $ack: $!", $dbh ); 
my $ac_list = join ',', @accnos;
print ACK "RE: Sequence update to $ac_list DS $ds\n\n";

open ( TMP, "> $tmp" ) || bail ( "cannot open file $tmp: $!", $dbh );

open ( TEMPLATE, "< $template" ) || bail ( "cannot open file $template: $!", $dbh ); 
while ( <TEMPLATE> )
{
   if ( /<ACCESSION NUMBERS>/ )
   {
      foreach my $acc ( @accnos )
      {
	 my %dbentry = ();
	 fetch_dbentry ( $dbh, $acc, \%dbentry );

	 if ( !defined ( $dbentry{primaryacc} ) )
	 {
	    bail ( "entry $acc not found in database.", $dbh );
	 }
	 else
	 {
	    # list accession number in acknowledgement letter and
	    # unload flat file from db.
	     
	    printf ACK "%-8s %s", $dbentry{primaryacc}, $dbentry{entry_status};
	    if ( $dbentry{entry_status} eq 'private' ){
		print ACK " (confidential";
		if ($dbentry{hold_date} ne "-" ){
		    print ACK " until $dbentry{hold_date}";
		}
		print ACK ")";
	    }
	    
	    print ACK "\n";

	    my $command = "$getff $login -a$acc";
	    if ( $test )
	    {
	       $command .= " -test";
	    }	

	    sys ( $command, __LINE__ );

	    # we strip the DT-lines from the flat file because the dates 
	    # are misleading if the entry has not yet been distributed.
	    # (also need to delete XX-line after DT-lines.)
	    my $dat = $acc.".dat";
	    open ( DAT, "< $dat" ) || bail ( "cannot open file $dat: $!", $dbh );
	    my $xx = 0;
	    while ( <DAT> )
	    {
	       if ( /^DT   / )             
	       {   
		  $xx = 1;  
	       }
	       elsif ( $xx == 1 && /^XX/ ) 
	       { 
		  $xx = 0;  
	       }
	       else               
	       {
		  print TMP $_;  
	       }
	    }
	    close ( DAT ) || bail ( "cannot close file $dat: $!", $dbh );
	 }
      }
   }
   else
   {
      print ACK $_;
   }
}

close ( TMP ) || bail ( "cannot close file $tmp: $!", $dbh );

#-------------------------------------------------------------------------------
# append flat file information to acknowledgement letter
#-------------------------------------------------------------------------------

print ACK "\n\n\n";
open ( TMP, "< $tmp" ) || bail ( "cannot open file $tmp: $!", $dbh );
while ( <TMP> )
{
   print ACK $_;
}
close ( TMP ) || bail ( "cannot close file $tmp: $!", $dbh );
unlink ( $tmp );

close ( ACK ) || bail ( "cannot close file $ack: $!", $dbh );
chmod ( 0660, $ack );
close ( TEMPLATE ) || bail ( "cannot close file $template: $!", $dbh );

#-------------------------------------------------------------------------------
# logout from database
#-------------------------------------------------------------------------------

dbi_rollback ( $dbh );
dbi_logoff ( $dbh );


#===============================================================================
# subroutines
#===============================================================================

sub fetch_dbentry
{
   my ( $dbh, $id, $rh_dbentry ) = @_;

   my $sql = "SELECT db.primaryacc#, db.project#, cv.status, 
                     NVL(to_char(db.hold_date, 'DD-MON-YYYY'), '-') 
                FROM dbentry db, cv_status cv
	       WHERE primaryacc# = '$id'
                 AND db.statusid = cv.statusid";

   ( $$rh_dbentry{primaryacc},
     $$rh_dbentry{project},
     $$rh_dbentry{entry_status},
     $$rh_dbentry{hold_date} ) = dbi_getrow ( $dbh, $sql );
}

